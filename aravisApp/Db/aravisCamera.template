# Database for the records specific to the ADAravis driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

include "ADGenICam.template"

record(ai, "$(P)$(R)ARFramesCompleted")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_COMPLETED")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC LLSV LOLO LOW LSV")
}

record(ai, "$(P)$(R)ARFrameFailures")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FAILURES")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(ai, "$(P)$(R)ARFrameUnderruns")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_UNDERRUNS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "$(P)$(R)ARMissingPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_MISSING_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(longin, "$(P)$(R)ARResentPackets")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESENT_PKTS")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV")
}

record(mbbo, "$(P)$(R)ARPacketResendEnable")
{
   field(DESC, "Packet resend enable")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_RESEND")
   field(ZRST, "Never")
   field(ZRVL, "0")
   field(ONST, "Always")
   field(ONVL, "1")
   field(VAL,  "1")
   field(PINI, "1")
   info(autosaveFields, "DESC ONSV ZRSV PINI VAL")
}

record(longout, "$(P)$(R)ARPacketTimeout")
{
   field(DESC, "Delay in us before packet resend request")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_PKT_TIMEOUT")
   field(VAL,  "20000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "$(P)$(R)ARFrameRetention")
{
   field(DESC, "Frame timeout in us after last packet")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_FRAME_RETENTION")
   field(VAL,  "100000")
   field(EGU,  "us")
   field(PINI, "1")
   info(autosaveFields, "DESC HHSV HIHI HIGH HSV LLSV LOLO LOW LSV PINI VAL")
}

record(longout, "$(P)$(R)ARResetCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_RESET")
   field(FLNK, "$(P)$(R)ARConnectCamera")
}

record(longout, "$(P)$(R)ARConnectCamera")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONNECTION")
   field(VAL, "1")
   field(PINI, "1")
}

record(calcout, "$(P)$(R)ARCheckConnection")
{
   field(SCAN, "1 second")
   field(INPA, "$(P)$(R)ARConnectCamera.SEVR CP")
   field(CALC, "A==0")
   field(OOPT, "When Non-zero")
   field(OUT,  "$(P)$(R)ARConnectCamera.PROC PP")
}

record(mbbi, "$(P)$(R)ARConvertPixelFormat_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## When unpacking Mono12Packed or Mono12p selects whether 16-bit output is 
## left shifted by 4 bits (Mono16High) or not (Mono16Low)
record(mbbo, "$(P)$(R)ARConvertPixelFormat") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_CONVERT_PIXEL_FORMAT")
  field(ZRST, "Mono16Low")
  field(ZRVL, "0")
  field(ONST, "Mono16High")
  field(ONVL, "1")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(mbbi, "$(P)$(R)ARShiftDir_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Select no shift, left shift, or right shift when reading data 
record(mbbo, "$(P)$(R)ARShiftDir") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_DIR")
  field(ZRST, "None")
  field(ZRVL, "0")
  field(ONST, "Left")
  field(ONVL, "1")
  field(TWST, "Right")
  field(TWVL, "2")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

record(mbbi, "$(P)$(R)ARShiftBits_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(SCAN, "I/O Intr")
  info(autosaveFields, "DESC ZRSV ONSV")
}

## Selects how many bits to shift left or right when reading data 
record(mbbo, "$(P)$(R)ARShiftBits") {
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))ARAVIS_SHIFT_BITS")
  field(ZRST, "1")
  field(ZRVL, "1")
  field(ONST, "2")
  field(ONVL, "2")
  field(TWST, "3")
  field(TWVL, "3")
  field(THST, "4")
  field(THVL, "4")
  field(FRST, "5")
  field(FRVL, "5")
  field(FVST, "6")
  field(FVVL, "6")
  field(SXST, "7")
  field(SXVL, "7")
  field(SVST, "8")
  field(SVVL, "8")
  field(PINI, "1")
  info(autosaveFields, "DESC ZRSV ONSV VAL")
}

# MCB - These are totally bogus and copied from the old aravisGige.
# TBD - Fix this!!
record( ao, "$(P)$(R)XmitRate" )
{
    field( DOL,  "125e6" )
    field( EGU,  "Bytes/Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   

record( ao, "$(P)$(R)CamProcDelay" )
{
    field( DOL,  "10e-3" )
    field( EGU,  "Sec" )
    field( PREC, "3" ) 
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   

# aravis DataType Enumerations
# Int8=0, UInt8=1, Int16=2, UInt16=3
record( calc, "$(P)$(R)XmitDelay" )
{
    field( INPA, "$(P)$(R)ArraySize_RBV CP MS" )
    field( INPB, "$(P)$(R)XmitRate CPP MS" )
    field( INPC, "$(P)$(R)CamProcDelay CPP MS" )
    field( INPD, "$(P)$(R)DataType_RBV CPP MS" )
    field( CALC, "(D&2)*A/B+C" )
    field( EGU,  "Sec" )
    field( PREC, "4" )
}   

record( ao, "$(P)$(R)DriverProcDelay" )
{
    field( DOL,  "1.0e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" ) 
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   

#
# TrigToTS_Calc: Calculates expected delay from trigger to timeStamp update 
# Inputs: All units in seconds
#   A   - Camera acquire time (exposure length)
#   B   - Camera image transmission time
#   C   - Estimated driver processing delay before requesting timestamp
record( calc, "$(P)$(R)TrigToTS_Calc" )
{
    field( INPA, "$(P)$(R)AcquireTime_RBV CP MS" )
    field( INPB, "$(P)$(R)XmitDelay CP MS" )
    field( INPC, "$(P)$(R)DriverProcDelay CP MS" )
    field( CALC, "A+B+C" )
    field( EGU,  "sec" )
    field( PREC, "5" ) 
}

#
# Try to make initial setup easier with one Big Red Button(tm).
#
record(seq, "$(P)$(R)InitTrigSettings") {
    field(SELM, "All")
    field(DOL0, "0")
    field(LNK0, "$(P)$(R)Acquire PP")
    field(DLY1, "3")
    field(DOL1, "0")
    field(LNK1, "$(P)$(R)FrameRateEnable PP")
    field(DLY2, "2")
    field(DOL2, "1")
    field(LNK2, "$(P)$(R)WriteTrigSelect.PROC")
    field(DOL3, "0")
    field(LNK3, "$(P)$(R)GC_LineSelector PP")
    field(DLY4, "1")
    field(DOL4, "0")
    field(LNK4, "$(P)$(R)GC_LineMode PP")
    field(DOL5, "1")
    field(LNK5, "$(P)$(R)TriggerSource PP")
    field(DOL6, "2")
    field(LNK6, "$(P)$(R)ImageMode PP")
    field(DOL7, "1")
    field(LNK7, "$(P)$(R)TriggerMode PP")
    field(DOL8, "0.0")
    field(LNK8, "$(P)$(R)CamTrigDelay PP")
    field(DOL9, "450000000")
    field(LNK9, "$(P)$(R)GC_DevLinThrLimit PP")
    field(DOLA, "0")
    field(LNKA, "$(P)$(R)GC_DevLinThrLimMode PP")
}

#
# Sigh... FrameStart isn't a constant value, so let's
# write it as an enum value.
#
record(stringout, "$(P)$(R)WriteTrigSelect") {
    field(VAL,  "FrameStart")
    field(OUT, "$(P)$(R)GC_TriggerSelector PP")		  
}

record(seq, "$(P)$(R)InitFreeRunSettings") {
    field(SELM, "All")
    field(DOL0, "0")
    field(LNK0, "$(P)$(R)Acquire PP")
    field(DLY1, "3")
    field(DOL1, "1")
    field(LNK1, "$(P)$(R)FrameRateEnable PP")
    field(DLY2, "2")
    field(DOL2, "0")
    field(LNK2, "$(P)$(R)TriggerSource PP")
    field(DOL3, "2")
    field(LNK3, "$(P)$(R)ImageMode PP")
    field(DOL4, "0")
    field(LNK4, "$(P)$(R)TriggerMode PP")
    field(DOL5, "0.1")
    field(LNK5, "$(P)$(R)AcquirePeriod PP")
    field(DOL6, "0.0")
    field(LNK6, "$(P)$(R)CamTrigDelay PP")
    field(DOL7, "450000000")
    field(LNK7, "$(P)$(R)GC_DevLinThrLimit PP")
    field(DOL8, "0")
    field(LNK8, "$(P)$(R)GC_DevLinThrLimMode PP")
}
